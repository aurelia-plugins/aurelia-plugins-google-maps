export declare class GoogleMaps {
    _bindingEngine: any;
    _config: any;
    _element: any;
    _eventAggregator: any;
    _taskQueue: any;
    _init: {
        address: boolean;
        latitude: boolean;
        longitude: boolean;
    };
    _map: any;
    _mapPromise: any;
    _mapResolve: any;
    _markers: any[];
    _previousInfoWindow: any;
    _scriptPromise: any;
    _subscription: any;
    address: any;
    autoCloseInfoWindows: boolean;
    latitude: number;
    longitude: number;
    mapTypeId: string;
    markers: any[];
    options: any;
    zoom: number;
    constructor(element: any, bindingEngine: any, config: any, eventAggregator: any, taskQueue: any);
    addressChanged(newValue: any): Promise<void>;
    latitudeChanged(newValue: any): Promise<void>;
    longitudeChanged(newValue: any): Promise<void>;
    mapTypeIdChanged(newValue: any): Promise<void>;
    markersChanged(newValue: any): Promise<void>;
    zoomChanged(newValue: any): Promise<void>;
    _setAddress(address: any): Promise<void>;
    _getCenter(latitude: any, longitude: any): any;
    _setCenter(latitude: any, longitude: any): void;
    _getMapTypeId(mapTypeId: any): any;
    _setMapTypeId(mapTypeId: any): void;
    _getZoom(zoom: any): number;
    _setZoom(zoom: any): void;
    _createMarker(marker: any): void;
    _geocode(address: any): Promise<{}>;
    _initialize(): Promise<void>;
    _infoWindowCloseClick(infoWindow: any): void;
    _infoWindowContentChanged(infoWindow: any): void;
    _infoWindowDomReady(infoWindow: any): void;
    _loadApiScript(): void;
    _mapClick(event: any): void;
    _markerClick(marker: any): void;
    _markerHighlight(id: any): void;
    _markerIcon(data: any): void;
    _markerMouseOut(marker: any): void;
    _markerMouseOver(marker: any): void;
    _markerPan(data: any): void;
    _markerUnhighlight(id: any): void;
    _publishBoundsChangedEvent(): void;
    _spliceMarkers(markers: any): void;
}
